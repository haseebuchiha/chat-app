# This workflow uses actions that are not certified by GitHub.  They are
# provided by a third-party and are governed by separate terms of service,
# privacy policy, and support documentation.
#
# This workflow will install a prebuilt Ruby version, install dependencies, and
# run tests and linters.
name: "Deploy EC2"
concurrency:
  group: ${{ github.ref }}-ec2-deploy
  cancel-in-progress: true
on:
  push:
    branches: [ "main" ]
env:
  chart_name: chat-app
  registry: 684904726815.dkr.ecr.ap-southeast-1.amazonaws.com
  sha_short: ""
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      # Add or replace dependency steps here
      - name: Set tag
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Login to Amazon ECR
        id: login-ecr
        env:
          AWS_DEFAULT_REGION: ${{secrets.AWS_REGION}}
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ECR_ACCESS_KEY}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_ECR_SECRET_KEY}}
        run: aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin ${{env.registry}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REPOSITORY: ${{ env.chart_name }}
          CACHE_FROM: ${{env.registry}}/${{ env.chart_name }}:latest
        run: |
          docker pull $CACHE_FROM
          docker buildx build --cache-from $CACHE_FROM -t ${{env.registry}}/$REPOSITORY:${{ env.sha_short }} -t ${{env.registry}}/$REPOSITORY:latest --build-arg BUILDKIT_INLINE_CACHE=1 --build-arg SECRET_KEY_BASE=${{secrets.SECRET_KEY_BASE}} --platform linux/arm64,linux/amd64 -f Dockerfile.prod --output "type=image,push=true" .

  # deploy:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Set tag
  #       id: vars
  #       run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
  #     - name: Deploy to EC2
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i ${{secrets.EC2_KEY}} ec2-user@${{secrets.EC2_IP}} "docker pull ${{env.registry}}/${{ env.chart_name }}:${{ env.sha_short }} && docker-compose -f docker-compose.prod.yml up -d"
